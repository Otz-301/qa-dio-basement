# **Trabalhando com Classes Abstratas em Java**

Neste tutorial, vamos aprender a trabalhar com **classes abstratas** em Java, que s√£o √∫teis quando voc√™ deseja criar uma classe base que define um contrato para suas subclasses, mas n√£o deseja instanciar a classe base diretamente. Vamos criar um exemplo de geometria, onde temos uma classe abstrata `Forma` e duas subclasses concretas: `Circulo` e `Retangulo`.

---

## **üìö O que voc√™ vai aprender?**

- **Classes Abstratas**: Como criar classes que n√£o podem ser instanciadas, mas fornecem m√©todos que devem ser implementados por subclasses.
- **M√©todos Abstratos**: Como definir m√©todos que devem ser implementados pelas subclasses.
- **Polimorfismo**: Como usar refer√™ncias de classe base (`Forma`) para armazenar objetos de subclasses (`Circulo`, `Retangulo`).

---

## **üî® Passos para Implementa√ß√£o**

### **1Ô∏è‚É£ Criar a Classe Abstrata `Forma`**

A classe `Forma` ser√° uma classe abstrata que define um contrato para o c√°lculo da √°rea das formas.

```java
// Forma.java
abstract class Forma {
    // M√©todo abstrato que deve ser implementado pelas subclasses
    abstract double calcularArea();
}
```



### **2Ô∏è‚É£ Criar uma Subclasse`Circulo`**

Uma classe `Circulo`herda d`Forma`e`calcularArea`,`œÄ * raio^2`.

// Circulo.java
class Circulo extends Forma {
    double raio;

    // Construtor para inicializar o raio
    public Circulo(double raio) {
        this.raio = raio;
    }
    
    // Implementa√ß√£o do m√©todo calcularArea para o c√≠rculo
    @Override
    double calcularArea() {
        return Math.PI * raio * raio;
    }
}

### **3Ô∏è‚É£ Criar uma Subclasse`Retangulo`**

Uma aula `Retangulo`tamb√©m`Forma`e implemente`calcularArea`, que calcula a √°rea do ret√¢ngulo em voc√™`largura * altura`.



// Retangulo.java
class Retangulo extends Forma {
    double largura;
    double altura;

    // Construtor para inicializar largura e altura
    public Retangulo(double largura, double altura) {
        this.largura = largura;
        this.altura = altura;
    }
    
    // Implementa√ß√£o do m√©todo calcularArea para o ret√¢ngulo
    @Override
    double calcularArea() {
        return largura * altura;
    }
}



### **4Ô∏è‚É£ Crie uma aula `Main`para testar**

No m√©todo `main`, vamos criar inst√¢ncias de `Circulo`e `Retangulo`, e usar o polimorfismo para calcular e exibir as √°reas de ambos.

// Main.java
public class Main {
    public static void main(String[] args) {
        // Criando objetos de Circulo e Retangulo
        Forma circulo = new Circulo(5);  // Raio = 5
        Forma retangulo = new Retangulo(4, 6);  // Largura = 4, Altura = 6

        // Exibindo as √°reas
        System.out.println("√Årea do c√≠rculo: " + circulo.calcularArea());   // 78.54
        System.out.println("√Årea do ret√¢ngulo: " + retangulo.calcularArea()); // 24.0
    }
}

## **üñ•Ô∏è Resultado Esperado**

Quando voc√™ rodar o c√≥digo, a sa√≠da no console ser√°:

√Årea do c√≠rculo: 78.53981633974483
√Årea do ret√¢ngulo: 24.0

## **üöÄ Tutorial para Rodar e Testar o C√≥digo**

### **1Ô∏è‚É£ Configurar o Ambiente de Desenvolvimento**

1. Verifique se o Java est√° instalado no seu computador

    . Execute o comando:

   ```
   java -version
   ```

2. Caso n√£o tenha o Java instalado, fa√ßa o download e instale o **Java JDK** .

3. Use um IDE (IntelliJ IDEA, Eclipse) ou um editor de texto como **Visual Studio Code** .

### **2Ô∏è‚É£ Criar Arquivos de C√≥digo**

1. **Crie tr√™s arquivos de c√≥digo** : `Forma.java`, `Circulo.java`, `Retangulo.java`, `Main.java`.
2. **Copie e cole o c√≥digo acima** nos arquivos relacionados.

### **3Ô∏è‚É£ Compilar e executar o c√≥digo**

1. Abra o terminal ou console do seu IDE.
2. Navegue at√© o diret√≥rio onde os arquivos est√£o localizados.
3. Compile os arquivos com o comando:

javac Forma.java Circulo.java Retangulo.java Main.java



Ap√≥s a compila√ß√£o, execute o programa com o comando: java Main



### **4Ô∏è‚É£ Teste as Funcionalidades**

- **Testar a classe abstrata:** Certifique-se de que voc√™ n√£o consegue instanciar a classe `Forma`, pois ela √© abstrata.
- **Calcular √°reas:** Verifique se o c√°lculo da √°rea do c√≠rculo e do ret√¢ngulo est√° correto.

## **üéØ Conclus√£o**

Neste tutorial, aprendemos a trabalhar com **classes abstratas** e **m√©todos abstratos** em Java. Criamos uma classe `Forma`com um m√©todo abstrato `calcularArea`, e suas subclasses `Circulo`e `Retangulo`implementamos esse m√©todo de forma espec√≠fica. O uso do polimorfismo permitiu que trat√°ssemos essas formas de maneira geral, mesmo sabendo que cada uma possui uma corre√ß√£o distinta do c√°lculo de √°rea.

üí° **Dica:** Agora que voc√™ conhece o b√°sico de classes abstratas, experimente criar novas formas, como `Triangulo`ou `Quadrado`, e implemente os c√°lculos relevantes de √°rea! üë®‚Äçüíªüë©‚Äçüíª









