# **Trabalhando com Heran√ßa em Java**

Este tutorial ensina como utilizar a **heran√ßa** em Java, onde uma classe pode herdar os atributos e m√©todos de outra. Vamos criar um exemplo simples com uma classe `Funcionario` e uma subclasse `Gerente` que aproveita os atributos e m√©todos da classe base.

---

## **üìö O que voc√™ vai aprender?**

- **Heran√ßa**: Como uma subclasse herda atributos e m√©todos da classe base (superclasse).
- **Reutiliza√ß√£o de c√≥digo**: A import√¢ncia de reutilizar funcionalidades comuns em uma classe base.
- **Organiza√ß√£o e Extens√£o**: Como estender o comportamento de uma classe para adicionar funcionalidades espec√≠ficas.

---

## **üî® Passos para Implementa√ß√£o**

### **1Ô∏è‚É£ Criar a Classe `Funcionario`**

A classe `Funcionario` ser√° a classe base, contendo atributos e m√©todos comuns a todos os funcion√°rios.

```java
// Funcionario.java
public class Funcionario {
    String nome;
    double salario;

    // M√©todo para exibir as informa√ß√µes do funcion√°rio
    public void exibirInformacoes() {
        System.out.println("Nome: " + nome + ", Sal√°rio: R$" + salario);
    }
}
```

### **2Ô∏è‚É£ Criar uma Subclasse`Gerente`**

A classe `Gerente`vai herdar da`Funcionario`e adicionar`bonus`. Al√©m disso, ela ter√° um m√©todo adicional para obter o sal√°rio total, que inclui o b√¥nus.

// Gerente.java
class Gerente extends Funcionario {
    double bonus;

    // M√©todo para exibir o sal√°rio total (sal√°rio + b√¥nus)
    public void exibirSalarioTotal() {
        System.out.println("Sal√°rio total: R$" + (salario + bonus));
    }
}

### **3Ô∏è‚É£ Criar uma aula `Main`para testar**

No m√©todo `main`, vamos criar um objeto da classe `Gerente`, especificar valores aos atributos e testar os m√©todos da classe base( `Funcionario`) e da classe derivada( `Gerente`).



// Main.java
public class Main {
    public static void main(String[] args) {
        // Criando um objeto Gerente
        Gerente gerente = new Gerente();
        gerente.nome = "Paula";
        gerente.salario = 5000.0;
        gerente.bonus = 1500.0;

        // Exibindo informa√ß√µes do gerente
        gerente.exibirInformacoes();  // Paula, 5000.0
        gerente.exibirSalarioTotal(); // 6500.0
    }
}



## **üñ•Ô∏è Resultado Esperado**

Quando voc√™ rodar o c√≥digo, a sa√≠da no console ser√°:

Nome: Paula, Sal√°rio: R$5000.0
Sal√°rio total: R$6500.0

## **üöÄ Tutorial para Rodar e Testar o C√≥digo**

### **1Ô∏è‚É£ Configurar o Ambiente de Desenvolvimento**

1. **Verifique se o Java est√° instalado no seu computador** . Execute o comando:



java -version

### **2Ô∏è‚É£ Criar Arquivos de C√≥digo**

1. **Crie tr√™s arquivos de c√≥digo** : `Funcionario.java`, `Gerente.java`, `Main.java`.
2. **Copie e cole o c√≥digo acima** nos arquivos relacionados

### **3Ô∏è‚É£ Compilar e executar o c√≥digo**

1. Abra o terminal ou console do seu IDE.
2. Navegue at√© o diret√≥rio onde os arquivos est√£o localizados.
3. Compile os arquivos com o comando:javac Funcionario.java Gerente.java Main.java



Ap√≥s a compila√ß√£o, execute o programa com o comando:

```

java Main
```

### **4Ô∏è‚É£ Teste as Funcionalidades**

- **Verifique os atributos herdados:** Quando voc√™ chama o m√©todo `exibirInformacoes()`no objeto `gerente`, ele deve exibir corretamente o nome e o sal√°rio.
- **Testar a adi√ß√£o do b√¥nus:** O m√©todo `exibirSalarioTotal()`deve calcular corretamente o sal√°rio total (sal√°rio + b√¥nus).



## **üéØ Conclus√£o**

Esse projeto √© descrito como usar a **heran√ßa** em Java para criar um sistema organizado e reutiliz√°vel. A classe `Gerente`herda os m√©todos e atributos da classe `Funcionario`e funcionalidades adicionais espec√≠ficas, como o c√°lculo do sal√°rio total.

üí° **Dica:** Agora que voc√™ j√° tem o b√°sico de heran√ßa, tente criar outras subclasses de `Funcionario`(por exemplo, `Assistente`, `Diretor`) e funcionalidades adicionais espec√≠ficas para cada uma! üë®‚Äçüíªüë©‚Äçüíº







