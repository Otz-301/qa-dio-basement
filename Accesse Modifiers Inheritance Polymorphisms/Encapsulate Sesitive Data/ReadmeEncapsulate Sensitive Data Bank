# üìö Projeto: Encapsulamento em Java - Classe `ContaBancaria`

## **üéØ Objetivo**

O objetivo deste projeto √© demonstrar o uso do **encapsulamento** em Java, utilizando modificadores de acesso, especificamente o modificador `private` para proteger um atributo sens√≠vel, como o `saldo` de uma conta banc√°ria. Al√©m disso, o projeto visa mostrar como interagir com atributos privados atrav√©s de m√©todos p√∫blicos.

## **üîß Implementa√ß√£o**

### **1Ô∏è‚É£ Estrutura do Projeto**

Este projeto consiste em uma √∫nica classe `ContaBancaria` com:

- Atributo privado `saldo` para representar o valor da conta.
- M√©todos p√∫blicos `depositar(double valor)` e `getSaldo()` para modificar e acessar o saldo.

Al√©m disso, haver√° uma classe de teste `TesteContaBancaria`, onde o comportamento da classe `ContaBancaria` ser√° validado, e tentaremos acessar diretamente o atributo `saldo` para entender o erro que ocorre quando tentamos acess√°-lo.

### **2Ô∏è‚É£ Classe `ContaBancaria`**

A classe `ContaBancaria` possui:

- **Atributo privado `saldo`:** Apenas acess√≠vel dentro da pr√≥pria classe.
- **M√©todo p√∫blico `depositar(double valor)`:** Para adicionar dinheiro ao saldo.
- **M√©todo p√∫blico `getSaldo()`:** Para retornar o saldo atual da conta.

#### C√≥digo de `ContaBancaria.java`:

```java
public class ContaBancaria {
    // Atributo privado
    private double saldo;

    // M√©todo p√∫blico para dep√≥sito
    public void depositar(double valor) {
        if (valor > 0) { // Verifica√ß√£o para dep√≥sitos v√°lidos
            saldo += valor;
        } else {
            System.out.println("O valor do dep√≥sito deve ser positivo.");
        }
    }

    // M√©todo p√∫blico para consultar o saldo
    public double getSaldo() {
        return saldo;
    }
}
```

### **3Ô∏è‚É£ Aula`TesteContaBancaria`**

Na classe `TesteContaBancaria`, instanciamos a classe `ContaBancaria`e tentamos depositar valores nela, utilizando o m√©todo `depositar`. Tamb√©m testamos o acesso direto ao atributo `saldo`, o que resulta em um erro devido ao encapsulamento.

#### C√≥digo de `TesteContaBancaria.java`:public class TesteContaBancaria {
    public static void main(String[] args) {
        // Instanciando uma conta banc√°ria
        ContaBancaria conta = new ContaBancaria();

        // Depositando valores na conta
        conta.depositar(500);
        conta.depositar(250);
    
        // Consultando o saldo via m√©todo p√∫blico
        System.out.println("Saldo atual: R$" + conta.getSaldo());
    
        // Tentativa de acessar o atributo saldo diretamente (causar√° erro de compila√ß√£o)
        // conta.saldo = 1000; // ERRO: saldo tem modificador private e n√£o √© acess√≠vel fora da classe
    
        // Apenas m√©todos p√∫blicos podem manipular o saldo
        System.out.println("Dep√≥sito realizado com sucesso.");
    }
}

### **4Ô∏è‚É£ Resultado Esperado**

Quando o programa for executado corretamente, o seguinte ser√° exibido no console:

Saldo atual: R$750.0
Dep√≥sito realizado com sucesso.

**Se tentarmos acessar o atributo `saldo`diretamente, como em:**

conta.saldo = 1000; // ERRO: saldo tem modificador private e n√£o √© acess√≠vel fora da classe

O compilador mostrar√° o seguinte erro:

TestContaBancaria.java:13: error: saldo has private access in ContaBancaria
conta.saldo = 1000;
^
1 error

### **Tutorial: Acessando o Atributo `saldo`Diretamente em Java (Erro de Compila√ß√£o)**

Este tutorial explicar√° como tentar acessar o atributo `saldo`diretamente em uma classe e o que acontece quando se tenta fazer isso. Vamos entender o motivo pelo qual isso resulta em um **erro de compila√ß√£o** em Java, devido ao uso do modificador de acesso `private`.

### **Objetivo:**

O objetivo √© entender o conceito de **encapsulamento** em Java e como ele impede o acesso direto a atributos privados, como `saldo`em uma classe `ContaBancaria`.

#### **1Ô∏è‚É£ Criando a Classe`ContaBancaria`**

Primeiro, crie uma classe chamada `ContaBancaria`com o atributo `saldo`declarado como `private`. A seguir, adicione m√©todos para depositar e obter o saldo.

```
Java
public class ContaBancaria {
    // Atributo privado
    private double saldo;

    // M√©todo p√∫blico para dep√≥sito
    public void depositar(double valor) {
        if (valor > 0) {
            saldo += valor;
        } else {
            System.out.println("O valor do dep√≥sito deve ser positivo.");
        }
    }

    // M√©todo p√∫blico para consultar o saldo
    public double getSaldo() {
        return saldo;
    }
}

```

#### **2Ô∏è‚É£ Criando a Classe`TesteContaBancaria`**

Agora, crie uma aula de teste chamada `TesteContaBancaria`. Nela, voc√™ tentar√° acessar o atributo `saldo`diretamente e ver√° o erro que ocorrer√°.

public class TesteContaBancaria {
    public static void main(String[] args) {
        // Instanciando uma conta banc√°ria
        ContaBancaria conta = new ContaBancaria();

        // Depositando valores na conta
        conta.depositar(500);
        conta.depositar(250);
    
        // Consultando o saldo via m√©todo p√∫blico
        System.out.println("Saldo atual: R$" + conta.getSaldo());
    
        // Tentativa de acessar o atributo saldo diretamente (causar√° erro de compila√ß√£o)
        // conta.saldo = 1000; // ERRO: saldo tem modificador private e n√£o √© acess√≠vel fora da classe
    
        // Apenas m√©todos p√∫blicos podem manipular o saldo
        System.out.println("Dep√≥sito realizado com sucesso.");
    }
}

#### **3Ô∏è‚É£ Tentando acessar o Atributo `saldo`diretamente**

Em `TesteContaBancaria`, tente acessar o atributo `saldo`diretamente de fora da aula `ContaBancaria`, como mostrado abaixo:

```
// Tentar acessar o atributo saldo diretamente (causar√° erro de compila√ß√£o)
conta.saldo = 1000; // ERRO: saldo tem modificador private e n√£o √© acess√≠vel fora da classe

```

#### **4Ô∏è‚É£ Resultado Esperado (Erro de Compila√ß√£o)**

Ao compilar o c√≥digo, voc√™ ver√° o seguinte **erro de compila√ß√£o** :

TestContaBancaria.java:13: error: saldo has private access in ContaBancaria
conta.saldo = 1000;
^
1 error





### **üì¶ Explica√ß√£o do Erro**

- **Encapsulamento e Modificador `private`:** O erro ocorre porque o atributo `saldo`foi declarado como `private`, o que significa que ele s√≥ pode ser acessado diretamente dentro da pr√≥pria classe `ContaBancaria`. Qualquer tentativa de acesso direto de fora da classe resultar√° em erro de compila√ß√£o.
- **Por que usar `private`?** O modificador `private`garante que o saldo s√≥ possa ser alterado ou acessado por m√©todos controlados, como `depositar`e `getSaldo`. Isso ajuda a proteger a integridade dos dados e evita altera√ß√µes indesejadas fora da classe.

### **5Ô∏è‚É£ O Conceito de Encapsulamento:**

Esse comportamento √© um exemplo de **encapsulamento** , um dos pilares da programa√ß√£o voltada para objetos. O encapsulamento garante que os dados de um objeto sejam protegidos contra acessos ou modifica√ß√µes externas n√£o controladas.

- Por que ou `saldo`√© `private`?

  - O atributo `saldo`√© marcado como `private`para garantir que ningu√©m de fora da classe possa modific√°-lo diretamente, sem passar por uma verifica√ß√£o controlada, como no m√©todo `depositar(double valor)`.

- Como acessar e modificar o `saldo`corretamente?

  - O acesso ao `saldo`deve ser feito por meio dos m√©todos p√∫blicos de classe, como `depositar(double valor)`e `getSaldo()`.
  - Isso evita que o saldo seja alterado diretamente de maneira insegura, permitindo que voc√™ adicione verifica√ß√µes ou outras l√≥gicas nos m√©todos antes de modificar o valor.

  ### **6Ô∏è‚É£ Solu√ß√£o (Acessando `saldo`a Forma Correta)**

  A maneira correta de acessar e modificar o saldo √© por meio dos m√©todos p√∫blicos definidos na classe, como `depositar`e `getSaldo`. Veja como ficaria a classe de teste funcionando corretamente:

  public class TesteContaBancaria {
      public static void main(String[] args) {
          // Instanciando uma conta banc√°ria
          ContaBancaria conta = new ContaBancaria();

          // Depositando valores na conta
          conta.depositar(500);
          conta.depositar(250);
      
          // Consultando o saldo via m√©todo p√∫blico
          System.out.println("Saldo atual: R$" + conta.getSaldo());
      
          // N√£o podemos acessar diretamente o saldo, apenas atrav√©s de m√©todos.
          // conta.saldo = 1000; // Isso geraria erro de compila√ß√£o!
      
          // Apenas m√©todos p√∫blicos podem manipular o saldo
          System.out.println("Dep√≥sito realizado com sucesso.");
      }
  }

  o executar o c√≥digo, o saldo ser√° manipulado corretamente por meio do m√©todo `depositar()`, e o acesso ao saldo √© feito apenas com o m√©todo `getSaldo()`.

## **üîë Conclus√£o**

- O **encapsulamento** protege os atributos da classe de acessos n√£o autorizados, garantindo que apenas m√©todos controlados possam alterar ou acessar esses dados.
- Ao tentar acessar o atributo `saldo`diretamente, o compilador gera um erro de compila√ß√£o porque `saldo`√© `private`.
- A maneira adequada de acessar ou modificar o saldo √© atrav√©s de m√©todos p√∫blicos como `depositar()`e `getSaldo()`.
- O uso do modificador `private`para o atributo `saldo`√© uma pr√°tica de **encapsulamento** , o que torna a classe mais segura e evita a manipula√ß√£o indevida dos dados.
- Apenas m√©todos p√∫blicos como `depositar`e `getSaldo`podem ser usados para interagir com o saldo, garantindo que o comportamento da classe seja controlado.



